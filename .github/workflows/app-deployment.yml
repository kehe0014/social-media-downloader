name: Application CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  STAGING_SERVER: 178.51.255.79
  DEPLOY_USER: deploy
  APP_NAME: social-media-downloader

jobs:
  test:
    name: Run Tests and Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout application code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
        
    - name: Run linting with Flake8
      run: |
        flake8 app.py --max-line-length=79 --show-source
        
    - name: Run unit tests with coverage
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
        else
          echo "No tests directory found, creating sample test structure"
          mkdir -p tests
          echo 'def test_example(): assert True' > tests/test_example.py
          python -m pytest tests/ -v
        fi
        
    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install and format code
      run: |
        pip install black
        black app.py --line-length 79
      
    - name: Create exclusion file
      run: |
        echo -e ".git\n.github\n.gitignore\n*.pyc\nvenv\ntests\n__pycache__\n.coverage\nhtmlcov\n.pytest_cache\ndownloads" > .tar_exclude
        
    - name: Create deployment package in /tmp
      run: |
        # Créer le package dans /tmp pour éviter "file changed as we read it"
        cd /tmp
        mkdir -p build-${{ github.sha }}
        cp -r $GITHUB_WORKSPACE/* build-${{ github.sha }}/
        cd build-${{ github.sha }}
        
        # Créer le package depuis le répertoire temporaire
        tar -czf /tmp/deployment-package-${{ github.sha }}.tar.gz \
          -X $GITHUB_WORKSPACE/.tar_exclude \
          .
          
        # Déplacer le package vers le workspace
        mv /tmp/deployment-package-${{ github.sha }}.tar.gz $GITHUB_WORKSPACE/
        
    - name: Clean up temporary files
      run: |
        rm -f .tar_exclude
        rm -rf /tmp/build-${{ github.sha }}
          
    - name: Upload deployment package artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ github.sha }}
        path: deployment-package-*.tar.gz
        retention-days: 30
        
    - name: Display package info
      run: |
        echo "Deployment package created:"
        ls -lh deployment-package-*.tar.gz

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r app.py -f html -o bandit-report.html || true
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.html
          safety-report.json
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [package, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop')
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package-${{ github.sha }}
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY_1BLU }}" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        ssh-keyscan -H $STAGING_SERVER >> ~/.ssh/known_hosts
        
    - name: Verify SSH connection
      run: |
        ssh -i ~/.ssh/staging_key $DEPLOY_USER@$STAGING_SERVER "echo '✅ SSH connection successful'"
        
    - name: Transfer deployment package
      run: |
        scp -i ~/.ssh/staging_key \
          deployment-package-*.tar.gz \
          $DEPLOY_USER@$STAGING_SERVER:/tmp/
        
    - name: Execute deployment on staging
      run: |
        ssh -i ~/.ssh/staging_key $DEPLOY_USER@$STAGING_SERVER "
          echo '🚀 Starting deployment on staging server...'
          
          # Create backup of current deployment
          BACKUP_DIR=\"/home/$DEPLOY_USER/backups/backup_\$(date +%Y%m%d_%H%M%S)\"
          mkdir -p \$BACKUP_DIR
          
          if [ -d \"/home/$DEPLOY_USER/$APP_NAME\" ]; then
            echo '📦 Creating backup of current version...'
            cp -r /home/$DEPLOY_USER/$APP_NAME/* \$BACKUP_DIR/ 2>/dev/null || true
          fi
          
          # Extract new deployment
          echo '📂 Extracting new deployment package...'
          mkdir -p /home/$DEPLOY_USER/$APP_NAME
          tar -xzf /tmp/deployment-package-${{ github.sha }}.tar.gz -C /home/$DEPLOY_USER/$APP_NAME
          
          # Set up Python virtual environment
          echo '🐍 Setting up Python environment...'
          cd /home/$DEPLOY_USER/$APP_NAME
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Clean up
          rm -f /tmp/deployment-package-${{ github.sha }}.tar.gz
          
          echo '✅ Deployment completed successfully!'
          echo '📁 Application location: /home/$DEPLOY_USER/$APP_NAME'
          echo '🔧 Virtual environment: /home/$DEPLOY_USER/$APP_NAME/venv'
        "
        
    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/staging_key $DEPLOY_USER@$STAGING_SERVER "
          echo '🔍 Verifying deployment...'
          cd /home/$DEPLOY_USER/$APP_NAME
          
          # Check if main application file exists
          if [ -f 'app.py' ]; then
            echo '✅ Main application file found'
          else
            echo '❌ Main application file missing'
            exit 1
          fi
          
          # Check virtual environment
          if [ -d 'venv' ]; then
            echo '✅ Virtual environment exists'
          else
            echo '❌ Virtual environment missing'
            exit 1
          fi
          
          # Test Python import
          source venv/bin/activate
          if python -c 'import sys; print(\"✅ Python path:\", sys.path)'; then
            echo '✅ Python environment working'
          else
            echo '❌ Python environment issue'
            exit 1
          fi
          
          echo '🎉 Deployment verification successful!'
        "
        
    - name: Cleanup SSH key
      run: |
        rm -f ~/.ssh/staging_key

  notify:
    name: Notify Pipeline Status
    runs-on: ubuntu-latest
    needs: [test, package, security-scan, deploy-staging]
    if: always()
    
    steps:
    - name: Notify pipeline completion
      run: |
        echo "=== CI/CD Pipeline Completion ==="
        echo "📋 Workflow: ${{ github.workflow }}"
        echo "🔗 SHA: ${{ github.sha }}"
        echo "🎯 Branch: ${{ github.ref }}"
        echo "📊 Job Status:"
        echo "   - Test: ${{ needs.test.result }}"
        echo "   - Security Scan: ${{ needs.security-scan.result }}"
        echo "   - Package: ${{ needs.package.result }}"
        echo "   - Staging Deployment: ${{ needs.deploy-staging.result }}"
        echo ""
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All CI/CD checks passed successfully!"
          echo "🌐 Staging Server: $STAGING_SERVER"
          echo "👤 Deploy User: $DEPLOY_USER"
          echo "📦 Application: $APP_NAME"
        else
          echo "❌ Some CI/CD checks failed"
          echo "Please check the failed jobs and fix the issues"
        fi

  cleanup:
    name: Cleanup Workflow
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup workflow run
      run: |
        echo "Cleaning up workflow temporary resources"
        echo "Workflow completed with overall status: ${{ job.status }}"