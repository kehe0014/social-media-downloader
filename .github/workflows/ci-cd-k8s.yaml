# ==============================================================================
# Workflow: Continuous Integration and Continuous Deployment (CI/CD) to K3S
# Description: Builds, tests, pushes to Docker Hub, and deploys to a remote K3s cluster.
# ==============================================================================
name: CI/CD Pipeline to K3S (Production - Docker Hub)

# ------------------------------------------------------------------------------
# Workflow Triggers
# ------------------------------------------------------------------------------
on:
  push:
    branches:
      - main
  workflow_dispatch:

# ------------------------------------------------------------------------------
# Environment Variables
# ------------------------------------------------------------------------------
env:
  PYTHON_VERSION: '3.10'
  DOCKER_USERNAME: tdksoft341
  REGISTRY: docker.io
  IMAGE_NAME: social-media-dashboard
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: prod
  K3S_HOST: 178.254.23.139
  K3S_USERNAME: hkengne

# ------------------------------------------------------------------------------
# Jobs
# ------------------------------------------------------------------------------
jobs:
  build-test-and-publish:
    name: Build, Test & Push to Docker Hub
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha

  deploy-k8s:
    name: Deploy to K3S Production
    needs: build-test-and-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy Kubernetes Manifests via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          IMAGE_NAME: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        with:
          host: ${{ env.K3S_HOST }}
          username: ${{ env.K3S_USERNAME }}
          key: ${{ secrets.SSH_VPS_DE }}
          envs: K8S_NAMESPACE,IMAGE_NAME
          script: |
            echo "--- Starting K3S Deployment to Namespace: ${K8S_NAMESPACE} ---"
            echo "Using image: ${IMAGE_NAME}"
            
            # 1. Create the production namespace if it doesn't exist
            kubectl create namespace "${K8S_NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f -
            
            # 2. Update the deployment with the new image
            echo "Updating deployment with new image..."
            kubectl set image deployment/social-media-scrapper-deployment \
              social-media-scrapper=${IMAGE_NAME} -n "${K8S_NAMESPACE}" --record
            
            # 3. Apply any other Kubernetes manifests (update the path to your actual manifests)
            # kubectl apply -f ./k8s-manifests/ -n "${K8S_NAMESPACE}"
            
            echo "Deployment triggered. Checking status..."
            kubectl rollout status deployment/social-media-scrapper-deployment -n "${K8S_NAMESPACE}" --timeout=5m
            
            # 4. Final Status Check
            if [ $? -eq 0 ]; then
                echo "✅ Deployment completed successfully!"
                echo "--- Current deployment status ---"
                kubectl get deployment social-media-scrapper-deployment -n "${K8S_NAMESPACE}"
                echo "--- Pods ---"
                kubectl get pods -n "${K8S_NAMESPACE}" -l app=social-media-scrapper
            else
                echo "❌ Deployment failed!"
                echo "--- Deployment description ---"
                kubectl describe deployment social-media-scrapper-deployment -n "${K8S_NAMESPACE}"
                echo "--- Pods logs ---"
                kubectl logs -n "${K8S_NAMESPACE}" -l app=social-media-scrapper --tail=50
                exit 1
            fi