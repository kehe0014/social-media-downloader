name: CI/CD Pipeline to K3S via SSH

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  DOCKER_USERNAME: tdksoft341
  REGISTRY: docker.io
  IMAGE_NAME: social-media-dashboard
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: my-app
  K3S_HOST: 178.254.23.139
  K3S_USERNAME: hkengne
  APP_DOMAIN: http://178.254.23.139

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy on K3S via SSH
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # üîç DEBUG STEP 1: VERIFY LOCAL FILE BEFORE COPY
      - name: Verify Local File Structure
        run: |
          echo "Current directory contents:"
          ls -F
          echo "Contents of k8s/ directory:"
          ls -l k8s/
          if [ ! -f k8s/deployment.yaml ]; then
            echo "‚ùå ERROR: k8s/deployment.yaml NOT FOUND LOCALLY. Check your branch/repository contents."
            exit 1
          fi
          echo "‚úÖ k8s/deployment.yaml confirmed to exist locally."
          
      - name: Copy deployment file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.K3S_HOST }}
          username: ${{ env.K3S_USERNAME }}
          key: ${{ secrets.SSH_VPS_DE }}
          source: "k8s/deployment.yaml"
          target: "/home/${{ env.K3S_USERNAME }}/"

      - name: Deploy on remote K3S cluster
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.K3S_HOST }}
          username: ${{ env.K3S_USERNAME }}
          key: ${{ secrets.SSH_VPS_DE }}
          script: |
            set -e
            
            # üî¨ DEBUG STEP 2: VERIFY REMOTE WRITE AND FILE PRESENCE
            echo "Testing write permission and confirming file existence on K3S host..."
            # Test write permission by creating a temporary file
            touch /home/${{ env.K3S_USERNAME }}/.write_test
            rm /home/${{ env.K3S_USERNAME }}/.write_test
            echo "‚úÖ Write permission successful."

            # List the copied file (this is the key check for the scp failure)
            ls -l /home/${{ env.K3S_USERNAME }}/deployment.yaml || { echo "‚ùå ERROR: deployment.yaml not found on remote server after copy." && exit 1; }

            echo "üîÑ Updating image tag in deployment.yaml"
            sed -i "s|tdksoft341/social-media-dashboard:latest|tdksoft341/social-media-dashboard:${{ env.IMAGE_TAG }}|g" /home/${{ env.K3S_USERNAME }}/deployment.yaml

            echo "üöÄ Applying deployment..."
            kubectl apply -n ${{ env.K8S_NAMESPACE }} -f /home/${{ env.K3S_USERNAME }}/deployment.yaml

            echo "üîé Checking rollout status..."
            kubectl rollout status deployment/social-media-scrapper-deployment -n ${{ env.K8S_NAMESPACE }}

            echo "‚úÖ Deployment successful."

  health-check:
    name: Cluster Health & Debug Info
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Check cluster health via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.K3S_HOST }}
          username: ${{ env.K3S_USERNAME }}
          key: ${{ secrets.SSH_VPS_DE }}
          script: |
            echo "ü©∫ Pods:"
            kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
            echo "üåê Services:"
            kubectl get svc -n ${{ env.K8S_NAMESPACE }}
            echo "üîÄ Ingress:"
            kubectl get ingress -n ${{ env.K8S_NAMESPACE }}
            echo "üß© Deployment details:"
            kubectl describe deployment social-media-scrapper-deployment -n ${{ env.K8S_NAMESPACE }}

  smoke-test:
    name: Basic HTTP Smoke Test
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Wait for app to be ready
        run: |
          echo "‚è≥ Waiting for app to be reachable..."
          for i in {1..15}; do
            if curl -s --head --fail ${{ env.APP_DOMAIN }} >/dev/null; then
              echo "‚úÖ App is reachable!"
              exit 0
            fi
            echo "App not ready yet... retrying in 10s"
            sleep 10
          done
          echo "‚ùå App not reachable after 150s" && exit 1

      - name: Check HTTP 200 on root
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_DOMAIN }})
          if [ "$STATUS" -eq 200 ]; then
            echo "‚úÖ Application responded with HTTP 200"
          else
            echo "‚ùå Application returned HTTP $STATUS"
            exit 1
          fi