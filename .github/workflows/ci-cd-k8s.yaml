name: CI/CD Pipeline to K3S (Production - Docker Hub)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  DOCKER_USERNAME: tdksoft341
  REGISTRY: docker.io
  IMAGE_NAME: social-media-dashboard
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: my-app
  K3S_HOST: 178.254.23.139
  K3S_USERNAME: hkengne
  APP_DOMAIN: http://178.254.23.139  # ou ton domaine Ingress si tu en as un

jobs:
  build-test-and-publish:
    name: Build, Test & Push to Docker Hub
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha

  deploy:
    name: Deploy to K3S Cluster
    runs-on: ubuntu-latest
    needs: build-test-and-publish

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify kubectl connection
        run: kubectl get nodes -o wide

      - name: Update image in deployment file
        run: |
          sed -i "s|tdksoft341/social-media-dashboard:latest|tdksoft341/social-media-dashboard:${{ env.IMAGE_TAG }}|g" deployment.yaml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f deployment.yaml
          kubectl rollout status deployment/social-media-scrapper-deployment -n ${{ env.K8S_NAMESPACE }}

  health-check:
    name: Check Cluster and App Health
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_K3S }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Check Pods status
        run: kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide

      - name: Check Services
        run: kubectl get svc -n ${{ env.K8S_NAMESPACE }}

      - name: Check Ingress
        run: kubectl get ingress -n ${{ env.K8S_NAMESPACE }}

      - name: Describe Deployment (debug info)
        run: kubectl describe deployment social-media-scrapper-deployment -n ${{ env.K8S_NAMESPACE }}

      - name: Get recent logs (last 50 lines)
        run: |
          POD_NAME=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=social-media-scrapper -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME -n ${{ env.K8S_NAMESPACE }} --tail=50

  smoke-tests:
    name: Run Basic HTTP Tests via Ingress
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Wait for app to be ready
        run: |
          echo "Waiting for the app to be accessible..."
          for i in {1..15}; do
            if curl -s --head --fail ${{ env.APP_DOMAIN }} >/dev/null; then
              echo "✅ App is reachable!"
              exit 0
            fi
            echo "App not ready yet... retrying in 10s"
            sleep 10
          done
          echo "❌ App is not reachable after 150s" && exit 1

      - name: Test app main route
        run: |
          echo "Testing main page..."
          curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_DOMAIN }} | grep 200

      - name: Test health or API endpoint (if exists)
        run: |
          # Exemple : /health ou /status si tu as un endpoint
          curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_DOMAIN }}/health || echo "⚠️ No /health endpoint found"
